c
includes?
c
params[:params][:noiseLevel]
c
params[:params][:noiseLevel]
c
min
    end
      min = "0#{min}"
    if min.length == 1
min = "#{Time.new.min}"
min.length == 1
min = "#{Time.new.min}"
Time.new.min.length == 1min = "#{Time.new.min}"
Time.new.min.length == 1
Time.new.min
Time.min
Time.strftime("%m")
"#{ Time.new.hour}#{Time.new.min}"
current_time
c
params[:params][:open]
c
params[:params][:open]
params
c
n
c
          @stores = Store.includes(:tags).in_bounds(params[:params][:bounds])
n
params[:params][:open]
params
c
        .where("CAST(time_closed AS INT) > ?", currentTime)c
        .where("CAST(time_open AS INT) < ?", currentTime)
        .where("day_of_week = ?", day_of_week)
@stores = Store.joins(:hours)
current_time
day_of_week
c
params[:params][:open]
params[:open]
params
c
@user
quit
User.find_by(username:"asdf")
User.find_by(username:"coffeeMaster1")
params[:password]
params[:username]
c
params
@current_user
c
@stores= Store.order('rating ASC').first(3)
@stores= Store.order('ratingASC').first(3)
params[:params][:numStores] == "3"
params[:params][:numStores]
params[:params][:mi,Stpres]
c
params[:params][:numStores]
params
c
params[:numStores]
params
c
@stores.first(10).length
@stores.first(10)
@stores
c
@stores.first(10)
@stores
c
params[:params][:tag]
c
params[:params][:tag]
if params[:params][:tag]
c
params[:params][:tag]
params[:params]
params
c
params[:params]
c
params[:params][:bounds]
params
c
params
carams
c
params
c
n
Review.where("store_id = ? AND user_id = ?", self.store_id, self.user_id)
self.user_id
self.store_id
reviews
c
n
c
n
reviews = Review.where("store_id = ? AND user_id = ?", self.store_id, self.user_id)
n
@review
n
review_params
@review
c
params[:bounds][:zoom]
params[:zoom]
params[:bounds]
params[:bounds][
[:bounds]
params[:zoom]
c
bounds[:northEast][:lng]
bounds[:southWest][:lng]
bounds[:northEast][:lat]
bounds[:southWest][:lat]
c
bounds[:southWest][:lat].to_f
bounds[:southWest][:lat].to_i
bounds
c
bounds[:northEast]c
bounds[:northEast]
bounds
c
params["bounds"]
c
params["bounds"]
c
params["bounds"]
c
params["bounds"]
c
params["fitler"]
params["
params.filter
params[filter]
params[filter][bounds]
params.filter.bounds
params
c
params
c
params[bounds]
bounds
c
params[bounds] == nil
bounds
params[bounds]
c
n
stores
cstores
c
@stores = stores
stores = Store.all
stores
c
params[bounds]
params
c
params
c
params
filter
bounds
params
c
params
bounds
params
c
params
c
params[:id]
params
bounds
c
bounds
filter
data
params
quit
c
reviews.empty?
reviews = Review.where("store_id = ? AND user_id = ?", self.store_id, self.user_id)
Review.where("store_id = ? AND user_id = ?", self.store_id, self.user_id)
c
Review.where("store_id = ? AND user_id = ?", self.store_id, self.user_id)
c
params
quit
params
quit
nquit
n
quit
@user
